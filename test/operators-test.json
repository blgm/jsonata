[
    {
        "name": "testdata1",
        "data": {
            "foo": {
                "bar": 42,
                "blah": [
                    {
                        "baz": {
                            "fud": "hello"
                        }
                    },
                    {
                        "baz": {
                            "fud": "world"
                        }
                    },
                    {
                        "bazz": "gotcha"
                    }
                ],
                "blah.baz": "here"
            },
            "bar": 98
        }
    },
    {
        "name": "testdata2",
        "data": {
            "Account": {
                "Account Name": "Firefly",
                "Order": [
                    {
                        "OrderID": "order103",
                        "Product": [
                            {
                                "Product Name": "Bowler Hat",
                                "ProductID": 858383,
                                "SKU": "0406654608",
                                "Description": {
                                    "Colour": "Purple",
                                    "Width": 300,
                                    "Height": 200,
                                    "Depth": 210,
                                    "Weight": 0.75
                                },
                                "Price": 34.45,
                                "Quantity": 2
                            },
                            {
                                "Product Name": "Trilby hat",
                                "ProductID": 858236,
                                "SKU": "0406634348",
                                "Description": {
                                    "Colour": "Orange",
                                    "Width": 300,
                                    "Height": 200,
                                    "Depth": 210,
                                    "Weight": 0.6
                                },
                                "Price": 21.67,
                                "Quantity": 1
                            }
                        ]
                    },
                    {
                        "OrderID": "order104",
                        "Product": [
                            {
                                "Product Name": "Bowler Hat",
                                "ProductID": 858383,
                                "SKU": "040657863",
                                "Description": {
                                    "Colour": "Purple",
                                    "Width": 300,
                                    "Height": 200,
                                    "Depth": 210,
                                    "Weight": 0.75
                                },
                                "Price": 34.45,
                                "Quantity": 4
                            },
                            {
                                "ProductID": 345664,
                                "SKU": "0406654603",
                                "Product Name": "Cloak",
                                "Description": {
                                    "Colour": "Black",
                                    "Width": 30,
                                    "Height": 20,
                                    "Depth": 210,
                                    "Weight": 2.0
                                },
                                "Price": 107.99,
                                "Quantity": 1
                            }
                        ]
                    }
                ]
            }
        }
    },
    {
        "name": "numeric",
        "group": [
            {
                "expression": "foo.bar + bar",
                "expected": 140,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "bar + foo.bar",
                "expected": 140,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "foo.bar - bar",
                "expected": -56,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "bar - foo.bar",
                "expected": 56,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "foo.bar * bar",
                "expected": 4116,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "bar * foo.bar",
                "expected": 4116,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "foo.bar / bar",
                "expected": 0.42857142857142855,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "bar / foo.bar",
                "expected": 2.3333333333333335,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "foo.bar % bar",
                "expected": 42,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "bar % foo.bar",
                "expected": 14,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "bar + foo.bar * bar",
                "expected": 4214,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "foo.bar * bar + bar",
                "expected": 4214,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "24 * notexist",
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "notexist + 1",
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "\"5\" + \"5\"",
                "error": {
                    "message": "LHS of + operator must evaluate to a number",
                    "position": 5
                }
            }
        ]
    },
    {
        "name": "comparison",
        "group": [
            {
                "expression": "foo.bar > bar",
                "expected": false,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "foo.bar >= bar",
                "expected": false,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "foo.bar<bar",
                "expected": true,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "foo.bar<=bar",
                "expected": true,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "bar>foo.bar",
                "expected": true,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "bar < foo.bar",
                "expected": false,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "foo.bar = bar",
                "expected": false,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "foo.bar!= bar",
                "expected": true,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "bar = foo.bar + 56",
                "expected": true,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "bar !=foo.bar + 56",
                "expected": false,
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "foo.blah.baz[fud = \"hello\"]",
                "expected": {
                    "fud": "hello"
                },
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "foo.blah.baz[fud != \"world\"]",
                "expected": {
                    "fud": "hello"
                },
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "Account.Order.Product[Price > 30].Price",
                "expected": [
                    34.45,
                    34.45,
                    107.99
                ],
                "data": {
                    "$ref": "testdata2"
                }
            },
            {
                "expression": "Account.Order.Product.Price[$<=35]",
                "expected": [
                    34.45,
                    21.67,
                    34.45
                ],
                "data": {
                    "$ref": "testdata2"
                }
            }
        ]
    },
    {
        "name": "desendant",
        "group": [
            {
                "expression": "foo.**.blah",
                "expected": [
                    {
                        "baz": {
                            "fud": "hello"
                        }
                    },
                    {
                        "baz": {
                            "fud": "world"
                        }
                    },
                    {
                        "bazz": "gotcha"
                    }
                ],
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "foo.**.fud",
                "expected": [
                    "hello",
                    "world"
                ],
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "foo.**.\"fud\"",
                "expected": [
                    "hello",
                    "world"
                ],
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "\"foo\".**.\"fud\"",
                "expected": [
                    "hello",
                    "world"
                ],
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "foo.*.**.fud",
                "expected": [
                    "hello",
                    "world"
                ],
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "foo.**.*.fud",
                "expected": [
                    "hello",
                    "world"
                ],
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "Account.Order.**.Colour",
                "expected": [
                    "Purple",
                    "Orange",
                    "Purple",
                    "Black"
                ],
                "data": {
                    "$ref": "testdata2"
                }
            },
            {
                "expression": "foo.**.fud[0]",
                "expected": [
                    "hello",
                    "world"
                ],
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "(foo.**.fud)[0]",
                "expected": "hello",
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "(**.fud)[0]",
                "expected": "hello",
                "data": {
                    "$ref": "testdata1"
                }
            },
            {
                "expression": "**.Price",
                "expected": [
                    34.45,
                    21.67,
                    34.45,
                    107.99
                ],
                "data": {
                    "$ref": "testdata2"
                }
            },
            {
                "expression": "**.Price[0]",
                "expected": [
                    34.45,
                    21.67,
                    34.45,
                    107.99
                ],
                "data": {
                    "$ref": "testdata2"
                }
            },
            {
                "expression": "(**.Price)[0]",
                "expected": 34.45,
                "data": {
                    "$ref": "testdata2"
                }
            },
            {
                "expression": "**[2]",
                "expected": "Firefly",
                "data": {
                    "$ref": "testdata2"
                }
            },
            {
                "expression": "Account.Order.blah.**",
                "data": {
                    "$ref": "testdata2"
                }
            }
        ]
    },
    {
        "name": "range",
        "group": [
            {
                "expression": "[0..9]",
                "expected": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ]
            },
            {
                "expression": "[0..9][$ % 2 = 0]",
                "expected": [
                    0,
                    2,
                    4,
                    6,
                    8
                ]
            },
            {
                "expression": "[0, 4..9, 20, 22]",
                "expected": [
                    0,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    20,
                    22
                ]
            },
            {
                "expression": "[5..2]",
                "expected": []
            },
            {
                "expression": "[5..2, 2..5]",
                "expected": [
                    2,
                    3,
                    4,
                    5
                ]
            },
            {
                "expression": "[-2..2]",
                "expected": [
                    -2,
                    -1,
                    0,
                    1,
                    2
                ]
            },
            {
                "expression": "[-2..2].($*$)",
                "expected": [
                    4,
                    1,
                    0,
                    1,
                    4
                ]
            },
            {
                "expression": "[-2..blah]",
                "expected": []
            },
            {
                "expression": "[blah..5, 3, -2..blah]",
                "expected": [
                    3
                ]
            },
            {
                "expression": "[1.1 .. 5]",
                "error": {
                    "message": "LHS of range operator (..) must evaluate to an integer",
                    "position": 7,
                    "token": "..",
                    "value": 1.1
                }
            },
            {
                "expression": "[1 .. 5.5]",
                "error": {
                    "message": "RHS of range operator (..) must evaluate to an integer",
                    "position": 5,
                    "token": "..",
                    "value": 5.5
                }
            }
        ]
    }
]